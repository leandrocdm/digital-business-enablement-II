## Util - Projeto SpringMVC##


1- Criar um Dynamic Web Project - version 3.1
2- Generar o web.xml
3- Converter para Maven Project
4- Adicionar as dependencias no Maven: 
<dependencies>
   <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-aop</artifactId>
      <version>4.3.5.RELEASE</version>
   </dependency>
   <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-webmvc</artifactId>
      <version>4.3.5.RELEASE</version>
   </dependency>
   <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
      <version>4.3.5.RELEASE</version>
   </dependency>
   <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-web</artifactId>
      <version>4.3.5.RELEASE</version>
   </dependency>
   <dependency>
      <groupId>commons-logging</groupId>
      <artifactId>commons-logging</artifactId>
      <version>1.2</version>
   </dependency>
   <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>jstl</artifactId>
      <version>1.2</version>
   </dependency>
</dependencies>

5- Configurar o web.xml:
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" id="WebApp_ID" version="3.1">
   <display-name>teste-spring-mvc</display-name>
   <welcome-file-list>
      <welcome-file>index.html</welcome-file>
      <welcome-file>index.htm</welcome-file>
      <welcome-file>index.jsp</welcome-file>
      <welcome-file>default.html</welcome-file>
      <welcome-file>default.htm</welcome-file>
      <welcome-file>default.jsp</welcome-file>
   </welcome-file-list>
   <servlet>
      <servlet-name>spring mvc</servlet-name>
      <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
      <init-param>
         <param-name>contextConfigLocation</param-name>
         <param-value>/WEB-INF/spring-context.xml</param-value>
      </init-param>
      <load-on-startup>1</load-on-startup>
   </servlet>
   <servlet-mapping>
      <servlet-name>spring mvc</servlet-name>
      <url-pattern>/</url-pattern>
   </servlet-mapping>
</web-app>

6- Criar o spring-context dentro da pasta WEB-INF com as seguints configuracoes:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">
   <context:component-scan base-package="COLOCAR O PACOTE DOS CONTROLLERS" />
   <mvc:annotation-driven />
   <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
      <property name="prefix" value="/WEB-INF/jsp/" />
      <property name="suffix" value=".jsp" />
   </bean>
</beans>

7- Pode configurar a controller, os jsps e os entitys que funcionará 

Controller: 
	@GetMapping("produto/cadastrar")
	public String abrirCadastro() {
		return "produto/cadastro";
	}
	
	@PostMapping(value="produto/cadastrar")
	public ModelAndView processarForm(Produto produto){
		ModelAndView retorno = new ModelAndView("produto/sucesso");
		retorno.addObject("produto", produto);
		return retorno;
	}

8- Configurar  o spring-context para nao ler o bootstrap
<mvc:default-servlet-handler/>

9- Criar a pasta 'resources' dentro de WebContent' e colocar o bootstrap (css e js) dentro delas

10- Configurar o template:
 -Criar uma pasta 'tags' dentro do WEB-INF
 -Criar o arquivo template.tag
 -Script do template.tag:
 
 <%@ tag language="java" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Spring MVC | Home</title>
<link rel="stylesheet" type="text/css"
	href="<c:url value="/resources/css/bootstrap.min.css"/>">
</head>
<body>
	<h1>Spring MVC - Exemplo</h1>
	<div class="container">
		<jsp:doBody />
	</div>
	<p>Todos os Direitos Reservados</p>
	<script src="<c:url value="/resources/js/jquery-3.1.1.min.js"/>"></script>
	<script src="<c:url value="/resources/js/bootstrap.min.js"/>"></script>
</body>
</html>
 
 11- Para configurar o template nos jsp é setar: 
 <%@ taglib prefix="tags" tagdir="/WEB-INF/tags" %>
<tags:template>
'script da pagina'
</tags:template>

12- Adicionar no pom.xml as dependencias do hibernate:

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>5.1.3.Final</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>5.2.4.Final</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>5.1.3.Final</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate.javax.persistence</groupId>
			<artifactId>hibernate-jpa-2.1-api</artifactId>
			<version>1.0.0.Final</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>4.1.0.RELEASE</version>
		</dependency>
    
   13- Adicionar o driver ojdbc.jar na pastar lib e dar build path
   
   14- Configurar o bean de conexao ao banco no spring-context:
   
   	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="persistenceUnitName" value="CLIENTE_ORACLE" />
		<property name="dataSource" ref="oracleDataSource" />
		<property name="jpaVendorAdapter">
			<bean
				class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
		</property>
	</bean>
	<bean id="oracleDataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName"
			value="oracle.jdbc.OracleDriver" />
		<property name="url"
			value="jdbc:oracle:thin:@oracle.fiap.com.br:1521:orcl" />
		<property name="username" value="RM77327" />
		<property name="password" value="140297" />
	</bean>
  
  15- Criar a pasta META-INF dentro de src
  
  16- Criar o arquivo persistence.xml e setar a seguinte config:
  
  <?xml version="1.0" encoding="UTF-8"?>
<persistence version="2.1" xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd">
	<persistence-unit name="CLIENTE_ORACLE" transaction-type="RESOURCE_LOCAL">
		<provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>
		<properties>
			<property name="hibernate.show_sql" value="true"/>
			<property name="hibernate.format_sql" value="true" />
									<!-- update, validate -->
			<property name="hibernate.hbm2ddl.auto" value="update"/>
			<property name="hibernate.dialect" value="org.hibernate.dialect.Oracle12cDialect"/>			
		</properties>	
	</persistence-unit>
</persistence>

17 - Ajustar o GenericDAOImpl 

public class GenericDAOImpl<T, K> implements GenericDao<T, K> { 
   
  @PersistenceContext
	protected EntityManager em;
	
	private Class<T> clazz;
	
	@SuppressWarnings("unchecked")
	public GenericDAOImpl() {
		clazz = (Class<T>) ((ParameterizedType)getClass().getGenericSuperclass()).getActualTypeArguments()[0];
	}
}

18- Remover os motedos begin, commit ou rollback

19- Adicionar o dao e a anotacao Autoride na controller
	@Autowired
	private ProdutoDAO dao;
	
20- Adicionar a anotacao de transactional nos metodos de acesso ao banco
@Transactional

21- Adicionar o bean de transacao no spring-context:
<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"> 
<property name="entityManagerFactory" ref="entityManagerFactory" />
</bean>
<tx:annotation-driven transaction-manager="transactionManager" />

22- Adicionar o pacote dao no spring-context 	
<context:component-scan
		base-package='br.com.localhost.teste.controller, br.com.localhost.teste.dao'/>
		
23- Colocar a anotacao @Repository nas classes DAOImpl



 
 
